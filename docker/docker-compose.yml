services:
  # Shared library service
  shared:
    build:
      context: ../
      dockerfile: shared/Dockerfile
    volumes:
      - shared-lib:/app/shared
    command: tail -f /dev/null

  # Backend host service (hardware interface)
  backend_host:
    build:
      context: ../
      dockerfile: backend_host/Dockerfile
    ports:
      - "6109:6109"
    volumes:
      - ../shared:/app/shared:ro
      - ../backend_core:/app/backend_core:ro
      - /dev:/dev  # Hardware access
    environment:
      - HOST_PORT=6109
      - HOST_NAME=docker-host-1
      - HOST_URL=http://localhost:6109
      - SERVER_URL=http://backend_server:5109
      - DEBUG=false
    depends_on:
      - shared
    privileged: true  # Required for hardware access
    restart: unless-stopped

  # Backend server service (API + Grafana)
  backend_server:
    build:
      context: ../
      dockerfile: backend_server/Dockerfile
    ports:
      - "5109:5109"  # nginx proxy (Flask API + Grafana)
      - "3001:3001"  # Grafana direct access (optional)
    volumes:
      - ../shared:/app/shared:ro
      # Grafana persistent data - survives container rebuilds
      - grafana-data:/var/lib/grafana
      - grafana-logs:/var/log/grafana
    environment:
      - SERVER_PORT=5109
      - SERVER_URL=http://localhost:5109
      - DEBUG=false
      - CORS_ORIGINS=http://localhost:3000,http://localhost:80,https://virtualpytest.vercel.app
      # Grafana configuration
      - GRAFANA_ADMIN_USER=admin
      - GRAFANA_ADMIN_PASSWORD=admin123
      - GRAFANA_SECRET_KEY=docker-grafana-secret-key
      - GRAFANA_DOMAIN=localhost
      # Grafana server environment variables
      - GF_SERVER_HTTP_PORT=3001
      - GF_SERVER_PROTOCOL=http
      - GF_SERVER_DOMAIN=localhost
                  - GF_SERVER_ROOT_URL=http://localhost:5109/grafana
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      # Supabase Database connection (only 1 variable needed)
      - SUPABASE_DB_URI=${SUPABASE_DB_URI}
    depends_on:
      - shared
    restart: unless-stopped

  # Backend discard service (AI false positive detection)
  backend_discard:
    build:
      context: ../
      dockerfile: backend_discard/Dockerfile
    volumes:
      - ../shared:/app/shared:ro
    environment:
      - UPSTASH_REDIS_REST_URL=${UPSTASH_REDIS_REST_URL}
      - UPSTASH_REDIS_REST_TOKEN=${UPSTASH_REDIS_REST_TOKEN}
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - DEBUG=false
    depends_on:
      - shared
    restart: unless-stopped

  # Frontend service
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - BACKEND_API_URL=http://backend_server:5109
      - VITE_SERVER_URL=http://localhost:5109
    depends_on:
      - backend_server
    restart: unless-stopped

volumes:
  shared-lib:
  # Grafana persistent volumes - data survives container rebuilds
  grafana-data:
  grafana-logs:

networks:
  default:
    name: virtualpytest-network 