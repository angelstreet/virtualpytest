#!/bin/bash

# VirtualPyTest - Install backend_host
# This script installs backend_host dependencies

set -e

echo "üîß Installing VirtualPyTest backend_host..."

# Get to project root directory (from setup/local to project root)
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"

# Change to project root
cd "$PROJECT_ROOT"

# Check if we're in the right directory
if [ ! -f "README.md" ] || [ ! -d "backend_host" ]; then
    echo "‚ùå Could not find virtualpytest project root directory"
    echo "Current directory: $(pwd)"
    exit 1
fi

# Create virtual environment if it doesn't exist
if [ ! -d "venv" ]; then
    echo "üêç Creating Python virtual environment..."
    python3 -m venv venv
    echo "‚úÖ Virtual environment created"
fi

# Activate virtual environment
echo "üîå Activating virtual environment..."
source venv/bin/activate

# Skip shared library installation - using direct imports instead
echo "üìö Shared library will be used via direct imports..."

# Skip backend_host installation - using direct imports instead
echo "‚öôÔ∏è Backend_core will be used via direct imports..."

# Install system dependencies for IR remote control
echo "üîß Installing IR remote control tools..."
sudo apt-get update
sudo apt-get install -y lirc v4l-utils
echo "‚úÖ IR tools installed - ir-ctl and lircd commands available"
echo "üí° Commands: ir-ctl --send <file>, ir-ctl --read, and lircd"

# Configure LIRC for IR remote control
echo "üîß Configuring LIRC for IR remote control..."
LIRC_CONFIG="/etc/lirc/lirc_options.conf"

# Check if LIRC config exists and backup if needed
if [ -f "$LIRC_CONFIG" ]; then
    echo "üìù Backing up existing LIRC configuration..."
    sudo cp "$LIRC_CONFIG" "$LIRC_CONFIG.backup.$(date +%Y%m%d_%H%M%S)"
fi

# Configure LIRC for IR hardware (keeping auto for device flexibility)
echo "üìù Configuring LIRC options..."
sudo tee "$LIRC_CONFIG" > /dev/null << 'EOF'
# LIRC configuration for VirtualPyTest IR remote control
# Auto-generated by install_host.sh

[lircd]
nodaemon        = False
driver          = default
device          = auto
output          = /var/run/lirc/lircd
pidfile         = /var/run/lirc/lircd.pid
plugindir       = /usr/lib/aarch64-linux-gnu/lirc/plugins
permission      = 666
allow-simulate  = No
repeat-max      = 600

[lircmd]
uinput          = False
nodaemon        = False
EOF

# Enable and start LIRC service
echo "üöÄ Starting LIRC service..."
sudo systemctl enable lircd
sudo systemctl restart lircd

# Check LIRC service status
if sudo systemctl is-active --quiet lircd; then
    echo "‚úÖ LIRC service is running"
    
    # List available IR devices
    echo "üì° Available IR devices:"
    sudo ir-ctl --list-devices 2>/dev/null || echo "   No IR devices detected (this is normal if no IR hardware is connected)"
else
    echo "‚ö†Ô∏è LIRC service failed to start - check logs with: sudo journalctl -u lircd"
fi

# Install backend_host dependencies
echo "üì¶ Installing backend_host dependencies..."
cd backend_host
pip install -r requirements.txt

# Create .env file in src/ directory if it doesn't exist
cd src
if [ ! -f ".env" ]; then
    if [ -f ".env.example" ]; then
        echo "üìù Creating .env file from .env.example..."
        cp .env.example .env
        echo "‚úÖ Created .env file - please configure it with your settings"
    else
        echo "‚ö†Ô∏è No .env.example found - please create .env manually"
    fi
else
    echo "‚úÖ .env file already exists"
fi

cd ../..

# Make RAM setup script executable
chmod +x "$PROJECT_ROOT/backend_host/scripts/setup_ram_hot_storage.sh"
chmod +x "$PROJECT_ROOT/backend_host/scripts/hot_cold_archiver.py"

echo "‚úÖ Scripts made executable"

# Setup SD card storage directories with correct permissions
echo "üìÅ Setting up SD card storage directories..."

STREAM_BASE="/var/www/html/stream"
DEVICES=("capture1" "capture2" "capture3" "capture4" "capture5" "capture6" "capture7" "capture8")

# Check if SD card is mounted at expected location
if [ ! -d "$STREAM_BASE" ]; then
    echo "‚ö†Ô∏è  Creating base directory: $STREAM_BASE"
    sudo mkdir -p "$STREAM_BASE"
fi

# Get www-data user info
WWW_DATA_UID=$(id -u www-data 2>/dev/null || echo "33")
WWW_DATA_GID=$(id -g www-data 2>/dev/null || echo "33")

echo "Setting up directories for each device..."
for DEVICE in "${DEVICES[@]}"; do
    DEVICE_PATH="$STREAM_BASE/$DEVICE"
    
    # Create device directory structure
    echo "  Setting up $DEVICE..."
    sudo mkdir -p "$DEVICE_PATH"/{captures,thumbnails,segments,metadata,audio}
    
    # Create hour folders (0-23) for rolling 24h storage
    for hour in {0..23}; do
        sudo mkdir -p "$DEVICE_PATH/captures/$hour"
        sudo mkdir -p "$DEVICE_PATH/segments/$hour"
        sudo mkdir -p "$DEVICE_PATH/metadata/$hour"
        sudo mkdir -p "$DEVICE_PATH/audio/$hour"
    done
    
    # Create segments temp directory for progressive MP4 merging
    sudo mkdir -p "$DEVICE_PATH/segments/temp"
    
    # Set ownership to www-data:www-data
    sudo chown -R www-data:www-data "$DEVICE_PATH"
    
    # Set permissions: 775 for most directories (group writable)
    sudo chmod 775 "$DEVICE_PATH"
    sudo chmod 775 "$DEVICE_PATH"/{captures,thumbnails,segments,metadata,audio}
    
    # Hour folders also group writable
    for hour in {0..23}; do
        sudo chmod 775 "$DEVICE_PATH/captures/$hour"
        sudo chmod 775 "$DEVICE_PATH/segments/$hour"
        sudo chmod 775 "$DEVICE_PATH/metadata/$hour"
        sudo chmod 775 "$DEVICE_PATH/audio/$hour"
    done
    
    # Temp directory group writable
    sudo chmod 775 "$DEVICE_PATH/segments/temp"
    
    # CRITICAL: metadata root needs 777 for hot_cold_archiver (runs as different user)
    sudo chmod 777 "$DEVICE_PATH/metadata"
    
    echo "  ‚úì $DEVICE directories created with www-data:www-data ownership"
done

# Add current user to www-data group for access
CURRENT_USER=$(whoami)
if ! groups "$CURRENT_USER" | grep -q "\bwww-data\b"; then
    echo "Adding $CURRENT_USER to www-data group..."
    sudo usermod -a -G www-data "$CURRENT_USER"
    echo "‚úì User added to www-data group (may need to re-login)"
else
    echo "‚úì User $CURRENT_USER already in www-data group"
fi

echo "‚úÖ SD card storage setup complete"
echo "   ‚Ä¢ All device directories created: captures, thumbnails, segments, metadata, audio"
echo "   ‚Ä¢ Hour folders (0-23) created for 24h rolling storage"
echo "   ‚Ä¢ Owner: www-data:www-data, Mode: 775 (group writable)"
echo "   ‚Ä¢ Ready for progressive MP4 merging and audio extraction"
echo ""

# Configure firewall ports for backend_host
echo "üî• Configuring firewall for backend_host..."

# Source port checking functions
source "$PROJECT_ROOT/setup/local/check_and_open_port.sh"

# Get HOST_PORT from backend_host .env file (default 6109)
HOST_ENV_FILE="$PROJECT_ROOT/backend_host/src/.env"
HOST_PORT=$(get_port_from_env "$HOST_ENV_FILE" "HOST_PORT" "6109")

echo "üîß Configuring firewall for backend_host ports:"
echo "   - Backend Host API: $HOST_PORT"

# Configure UFW for backend_host ports
check_and_open_port "$HOST_PORT" "backend_host API" "tcp"

echo "‚úÖ backend_host installation completed!"
echo ""
echo "üìù Next steps:"
echo "   1. Run: ./setup/local/install_host_services.sh  # Setup services & RAM storage"
echo "   2. Run: ./setup/local/launch_host.sh            # Start backend_host" 