                     
                     
┌───────────────────┐
│ 224 Code Findings │
└───────────────────┘
                                                               
  [36m[22m[24m  backend_host/src/controllers/desktop/bash.py[0m
   ❯❯❱ python.lang.security.audit.subprocess-shell-true.subprocess-shell-true
          Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will   
          spawn the command using a shell process. Doing so propagates current shell settings and variables,
          which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.  
          Details: https://sg.run/J92w                                                                      
                                                                                                            
           ▶▶┆ Autofix ▶ False
           78┆ shell=True,
                                                             
  [36m[22m[24m  backend_host/src/lib/utils/appium_utils.py[0m
   ❯❯❱ python.lang.security.audit.subprocess-shell-true.subprocess-shell-true
          Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn
          the command using a shell process. Doing so propagates current shell settings and variables, which 
          makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.         
          Details: https://sg.run/J92w                                                                       
                                                                                                             
           ▶▶┆ Autofix ▶ False
          116┆ shell=True,
                                                                 
  [36m[22m[24m  backend_host/src/lib/utils/navigation_cache.py[0m
    ❯❱ python.lang.security.deserialization.pickle.avoid-pickle
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
           42┆ cached_data = pickle.load(f)
            ⋮┆----------------------------------------
           94┆ pickle.dump(cache_data, f)
            ⋮┆----------------------------------------
          121┆ pickle.dump(cache_data, f)
                                            
  [36m[22m[24m  backend_server/Dockerfile[0m
   ❯❯❱ dockerfile.security.last-user-is-root.last-user-is-root
          The last user in the container is 'root'. This is a security hazard because if an attacker gains
          control of the container they will have root access. Switch back to another user after running  
          commands as 'root'.                                                                             
          Details: https://sg.run/5Z43                                                                    
                                                                                                          
          100┆ USER root
                                                                   
  [36m[22m[24m  backend_server/config/nginx/http_only_local.conf[0m
    ❯❱ generic.nginx.security.possible-h2c-smuggling.possible-nginx-h2c-smuggling
          Conditions for Nginx H2C smuggling identified. H2C smuggling allows upgrading HTTP/1.1 connections 
          to lesser-known HTTP/2 over cleartext (h2c) connections which can allow a bypass of reverse proxy  
          access controls, and lead to long-lived, unrestricted HTTP traffic directly to back-end servers. To
          mitigate: WebSocket support required: Allow only the value websocket for HTTP/1.1 upgrade headers  
          (e.g., Upgrade: websocket). WebSocket support not required: Do not forward Upgrade headers.        
          Details: https://sg.run/ploZ                                                                       
                                                                                                             
           28┆ proxy_http_version 1.1;
           29┆ proxy_set_header Upgrade $http_upgrade;
           30┆ proxy_set_header Connection "upgrade";
            ⋮┆----------------------------------------
           54┆ proxy_http_version 1.1;
           55┆ proxy_set_header Upgrade $http_upgrade;
           56┆ proxy_set_header Connection "upgrade";
            ⋮┆----------------------------------------
           68┆ proxy_http_version 1.1;
           69┆ proxy_set_header Upgrade $http_upgrade;
           70┆ proxy_set_header Connection "upgrade";
            ⋮┆----------------------------------------
           79┆ proxy_http_version 1.1;
           80┆ proxy_set_header Upgrade $http_upgrade;
           81┆ proxy_set_header Connection "upgrade";
            ⋮┆----------------------------------------
           90┆ proxy_http_version 1.1;
           91┆ proxy_set_header Upgrade $http_upgrade;
           92┆ proxy_set_header Connection "upgrade";
   
    ❯❱ generic.nginx.security.header-redefinition.header-redefinition
          The 'add_header' directive is called in a 'location' block after headers have been set at the server
          block. Calling 'add_header' in the location block will actually overwrite the headers defined in the
          server block, no matter which headers are set. To fix this, explicitly set all headers or set all   
          headers in the server block.                                                                        
          Details: https://sg.run/Lwl7                                                                        
                                                                                                              
           95┆ add_header Access-Control-Allow-Origin "*" always;
            ⋮┆----------------------------------------
           96┆ add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            ⋮┆----------------------------------------
           97┆ add_header Access-Control-Allow-Headers "Content-Type, Accept, Upgrade, Connection";
   
    ❯❱ generic.nginx.security.alias-path-traversal.alias-path-traversal
          The alias in this location block is subject to a path traversal because the location path does not
          end in a path separator (e.g., '/'). To fix, add a path separator to the end of the path.         
          Details: https://sg.run/ZvNL                                                                      
                                                                                                            
          100┆ location ~                                                                            
               ^/host/stream/([^/]+)/(captures|thumbnails|segments|metadata|audio|transcript)/(.+)$ {
          101┆     alias /var/www/html/stream/;
          102┆     try_files /$1/hot/$2/$3 /$1/$2/$3 =404;
          103┆
          104┆     # CORS headers for HLS streaming
          105┆     add_header Access-Control-Allow-Origin "*" always;
          106┆     add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
          107┆     add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-
               Since,Cache-Control,Content-Type,Range" always;                                          
          108┆     add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
          109┆
             [hid 8 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ generic.nginx.security.header-redefinition.header-redefinition
          The 'add_header' directive is called in a 'location' block after headers have been set at the server
          block. Calling 'add_header' in the location block will actually overwrite the headers defined in the
          server block, no matter which headers are set. To fix this, explicitly set all headers or set all   
          headers in the server block.                                                                        
          Details: https://sg.run/Lwl7                                                                        
                                                                                                              
          105┆ add_header Access-Control-Allow-Origin "*" always;
            ⋮┆----------------------------------------
          106┆ add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            ⋮┆----------------------------------------
          107┆ add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-
               Since,Cache-Control,Content-Type,Range" always;                                      
            ⋮┆----------------------------------------
          108┆ add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
            ⋮┆----------------------------------------
          111┆ add_header Cache-Control "no-cache, no-store, must-revalidate" always;
            ⋮┆----------------------------------------
          114┆ add_header Content-Length 0;
            ⋮┆----------------------------------------
          122┆ add_header Access-Control-Allow-Origin "*" always;
            ⋮┆----------------------------------------
          123┆ add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            ⋮┆----------------------------------------
          124┆ add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-
               Since,Cache-Control,Content-Type,Range" always;                                      
            ⋮┆----------------------------------------
          125┆ add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
            ⋮┆----------------------------------------
          128┆ add_header Content-Length 0;
            ⋮┆----------------------------------------
          141┆ add_header Access-Control-Allow-Origin *;
            ⋮┆----------------------------------------
          142┆ add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
            ⋮┆----------------------------------------
          143┆ add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-
               Since,Cache-Control,Content-Type,Range';                                             
            ⋮┆----------------------------------------
          144┆ add_header Access-Control-Expose-Headers 'Content-Length,Content-Range';
            ⋮┆----------------------------------------
          154┆ add_header Cache-Control "public, immutable";
            ⋮┆----------------------------------------
          161┆ add_header Content-Type text/plain;
                                                         
  [36m[22m[24m  backend_server/config/nginx/local.conf[0m
    ❯❱ generic.nginx.security.possible-h2c-smuggling.possible-nginx-h2c-smuggling
          Conditions for Nginx H2C smuggling identified. H2C smuggling allows upgrading HTTP/1.1 connections 
          to lesser-known HTTP/2 over cleartext (h2c) connections which can allow a bypass of reverse proxy  
          access controls, and lead to long-lived, unrestricted HTTP traffic directly to back-end servers. To
          mitigate: WebSocket support required: Allow only the value websocket for HTTP/1.1 upgrade headers  
          (e.g., Upgrade: websocket). WebSocket support not required: Do not forward Upgrade headers.        
          Details: https://sg.run/ploZ                                                                       
                                                                                                             
           60┆ proxy_http_version 1.1;
           61┆ proxy_set_header Upgrade $http_upgrade;
           62┆ proxy_set_header Connection "upgrade";
            ⋮┆----------------------------------------
          102┆ proxy_http_version 1.1;
          103┆ proxy_set_header Upgrade $http_upgrade;
          104┆ proxy_set_header Connection "upgrade";
            ⋮┆----------------------------------------
          120┆ proxy_http_version 1.1;
          121┆ proxy_set_header Upgrade $http_upgrade;
          122┆ proxy_set_header Connection "upgrade";
            ⋮┆----------------------------------------
          135┆ proxy_http_version 1.1;
          136┆ proxy_set_header Upgrade $http_upgrade;
          137┆ proxy_set_header Connection "upgrade";
            ⋮┆----------------------------------------
          143┆ proxy_http_version 1.1;
          144┆ proxy_set_header Upgrade $http_upgrade;
          145┆ proxy_set_header Connection "upgrade";
   
    ❯❱ generic.nginx.security.alias-path-traversal.alias-path-traversal
          The alias in this location block is subject to a path traversal because the location path does not
          end in a path separator (e.g., '/'). To fix, add a path separator to the end of the path.         
          Details: https://sg.run/ZvNL                                                                      
                                                                                                            
          154┆ location ~                                                                            
               ^/host/stream/([^/]+)/(captures|thumbnails|segments|metadata|audio|transcript)/(.+)$ {
          155┆     alias /var/www/html/stream/;
          156┆     try_files /$1/hot/$2/$3 /$1/$2/$3 =404;
          157┆
          158┆     # CORS headers for HLS streaming
          159┆     add_header Access-Control-Allow-Origin "*" always;
          160┆     add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
          161┆     add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-
               Since,Cache-Control,Content-Type,Range" always;                                          
          162┆     add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
          163┆
             [hid 8 additional lines, adjust with --max-lines-per-finding] 
                                                          
  [36m[22m[24m  backend_server/config/nginx/render.conf[0m
    ❯❱ generic.nginx.security.possible-h2c-smuggling.possible-nginx-h2c-smuggling
          Conditions for Nginx H2C smuggling identified. H2C smuggling allows upgrading HTTP/1.1 connections 
          to lesser-known HTTP/2 over cleartext (h2c) connections which can allow a bypass of reverse proxy  
          access controls, and lead to long-lived, unrestricted HTTP traffic directly to back-end servers. To
          mitigate: WebSocket support required: Allow only the value websocket for HTTP/1.1 upgrade headers  
          (e.g., Upgrade: websocket). WebSocket support not required: Do not forward Upgrade headers.        
          Details: https://sg.run/ploZ                                                                       
                                                                                                             
           25┆ proxy_http_version 1.1;
           26┆ proxy_set_header Upgrade $http_upgrade;
           27┆ proxy_set_header Connection "upgrade";
   
    ❯❱ generic.nginx.security.header-redefinition.header-redefinition
          The 'add_header' directive is called in a 'location' block after headers have been set at the server
          block. Calling 'add_header' in the location block will actually overwrite the headers defined in the
          server block, no matter which headers are set. To fix this, explicitly set all headers or set all   
          headers in the server block.                                                                        
          Details: https://sg.run/Lwl7                                                                        
                                                                                                              
           29┆ add_header Access-Control-Allow-Origin "*" always;
            ⋮┆----------------------------------------
           30┆ add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            ⋮┆----------------------------------------
           31┆ add_header Access-Control-Allow-Headers "Content-Type, Accept, Upgrade, Connection";
            ⋮┆----------------------------------------
           41┆ add_header Access-Control-Allow-Origin "*" always;
            ⋮┆----------------------------------------
           42┆ add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            ⋮┆----------------------------------------
           43┆ add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-
               Since,Cache-Control,Content-Type,Range" always;                                      
            ⋮┆----------------------------------------
           44┆ add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
            ⋮┆----------------------------------------
           47┆ add_header Content-Type application/json;
            ⋮┆----------------------------------------
           65┆ add_header Access-Control-Allow-Origin "*" always;
            ⋮┆----------------------------------------
           66┆ add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            ⋮┆----------------------------------------
           67┆ add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With"
               always;                                                                                
            ⋮┆----------------------------------------
           87┆ add_header Content-Type application/json;
            ⋮┆----------------------------------------
           94┆ add_header Content-Type application/json;
            ⋮┆----------------------------------------
          100┆ add_header Content-Type application/json;
                                                             
  [36m[22m[24m  backend_server/config/nginx/sunri-pi1.conf[0m
    ❯❱ generic.nginx.security.insecure-redirect.insecure-redirect
          Detected an insecure redirect in this nginx configuration. If no scheme is specified, nginx will 
          forward the request with the incoming scheme. This could result in unencrypted communications. To
          fix this, include the 'https' scheme.                                                            
          Details: https://sg.run/8y14                                                                     
                                                                                                           
           94┆ rewrite ^ /mac/vnc/vnc_lite.html permanent;
   
    ❯❱ generic.nginx.security.possible-h2c-smuggling.possible-nginx-h2c-smuggling
          Conditions for Nginx H2C smuggling identified. H2C smuggling allows upgrading HTTP/1.1 connections 
          to lesser-known HTTP/2 over cleartext (h2c) connections which can allow a bypass of reverse proxy  
          access controls, and lead to long-lived, unrestricted HTTP traffic directly to back-end servers. To
          mitigate: WebSocket support required: Allow only the value websocket for HTTP/1.1 upgrade headers  
          (e.g., Upgrade: websocket). WebSocket support not required: Do not forward Upgrade headers.        
          Details: https://sg.run/ploZ                                                                       
                                                                                                             
          100┆ proxy_http_version 1.1;
          101┆ proxy_set_header Upgrade $http_upgrade;
          102┆ proxy_set_header Connection "upgrade";
   
    ❯❱ generic.nginx.security.alias-path-traversal.alias-path-traversal
          The alias in this location block is subject to a path traversal because the location path does not
          end in a path separator (e.g., '/'). To fix, add a path separator to the end of the path.         
          Details: https://sg.run/ZvNL                                                                      
                                                                                                            
          118┆ location ~                                                                            
               ^/host/stream/([^/]+)/(captures|thumbnails|segments|metadata|audio|transcript)/(.+)$ {
          119┆     alias /var/www/html/stream/;
          120┆     try_files /$1/hot/$2/$3 /$1/$2/$3 =404;
          121┆
          122┆     # CORS headers for HLS streaming
          123┆     add_header Access-Control-Allow-Origin "*" always;
          124┆     add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
          125┆     add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-
               Since,Cache-Control,Content-Type,Range" always;                                          
          126┆     add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
          127┆
             [hid 10 additional lines, adjust with --max-lines-per-finding] 
          140┆ location ~ ^/host/stream/(.+)/$ {
          141┆     alias /var/www/html/stream/$1/;
          142┆
          143┆     add_header Access-Control-Allow-Origin "*" always;
          144┆     add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
          145┆     add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-
               Since,Cache-Control,Content-Type,Range" always;                                          
          146┆     add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
          147┆     add_header Cache-Control "no-cache, no-store, must-revalidate" always;
          148┆
          149┆     autoindex on;
             [hid 8 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ generic.nginx.security.possible-h2c-smuggling.possible-nginx-h2c-smuggling
          Conditions for Nginx H2C smuggling identified. H2C smuggling allows upgrading HTTP/1.1 connections 
          to lesser-known HTTP/2 over cleartext (h2c) connections which can allow a bypass of reverse proxy  
          access controls, and lead to long-lived, unrestricted HTTP traffic directly to back-end servers. To
          mitigate: WebSocket support required: Allow only the value websocket for HTTP/1.1 upgrade headers  
          (e.g., Upgrade: websocket). WebSocket support not required: Do not forward Upgrade headers.        
          Details: https://sg.run/ploZ                                                                       
                                                                                                             
          209┆ proxy_http_version 1.1;
          210┆ proxy_set_header Upgrade $http_upgrade;
          211┆ proxy_set_header Connection "upgrade";
   
    ❯❱ generic.nginx.security.insecure-redirect.insecure-redirect
          Detected an insecure redirect in this nginx configuration. If no scheme is specified, nginx will 
          forward the request with the incoming scheme. This could result in unencrypted communications. To
          fix this, include the 'https' scheme.                                                            
          Details: https://sg.run/8y14                                                                     
                                                                                                           
          237┆ rewrite ^ /pi2/vnc/vnc_lite.html permanent;
   
    ❯❱ generic.nginx.security.possible-h2c-smuggling.possible-nginx-h2c-smuggling
          Conditions for Nginx H2C smuggling identified. H2C smuggling allows upgrading HTTP/1.1 connections 
          to lesser-known HTTP/2 over cleartext (h2c) connections which can allow a bypass of reverse proxy  
          access controls, and lead to long-lived, unrestricted HTTP traffic directly to back-end servers. To
          mitigate: WebSocket support required: Allow only the value websocket for HTTP/1.1 upgrade headers  
          (e.g., Upgrade: websocket). WebSocket support not required: Do not forward Upgrade headers.        
          Details: https://sg.run/ploZ                                                                       
                                                                                                             
          242┆ proxy_http_version 1.1;
          243┆ proxy_set_header Upgrade $http_upgrade;
          244┆ proxy_set_header Connection "upgrade";
   
    ❯❱ generic.nginx.security.insecure-redirect.insecure-redirect
          Detected an insecure redirect in this nginx configuration. If no scheme is specified, nginx will 
          forward the request with the incoming scheme. This could result in unencrypted communications. To
          fix this, include the 'https' scheme.                                                            
          Details: https://sg.run/8y14                                                                     
                                                                                                           
          276┆ rewrite ^ /pi3/vnc/vnc_lite.html permanent;
   
    ❯❱ generic.nginx.security.possible-h2c-smuggling.possible-nginx-h2c-smuggling
          Conditions for Nginx H2C smuggling identified. H2C smuggling allows upgrading HTTP/1.1 connections 
          to lesser-known HTTP/2 over cleartext (h2c) connections which can allow a bypass of reverse proxy  
          access controls, and lead to long-lived, unrestricted HTTP traffic directly to back-end servers. To
          mitigate: WebSocket support required: Allow only the value websocket for HTTP/1.1 upgrade headers  
          (e.g., Upgrade: websocket). WebSocket support not required: Do not forward Upgrade headers.        
          Details: https://sg.run/ploZ                                                                       
                                                                                                             
          281┆ proxy_http_version 1.1;
          282┆ proxy_set_header Upgrade $http_upgrade;
          283┆ proxy_set_header Connection "upgrade";
   
    ❯❱ generic.nginx.security.insecure-redirect.insecure-redirect
          Detected an insecure redirect in this nginx configuration. If no scheme is specified, nginx will 
          forward the request with the incoming scheme. This could result in unencrypted communications. To
          fix this, include the 'https' scheme.                                                            
          Details: https://sg.run/8y14                                                                     
                                                                                                           
          315┆ rewrite ^ /pi4/vnc/vnc_lite.html permanent;
   
    ❯❱ generic.nginx.security.possible-h2c-smuggling.possible-nginx-h2c-smuggling
          Conditions for Nginx H2C smuggling identified. H2C smuggling allows upgrading HTTP/1.1 connections 
          to lesser-known HTTP/2 over cleartext (h2c) connections which can allow a bypass of reverse proxy  
          access controls, and lead to long-lived, unrestricted HTTP traffic directly to back-end servers. To
          mitigate: WebSocket support required: Allow only the value websocket for HTTP/1.1 upgrade headers  
          (e.g., Upgrade: websocket). WebSocket support not required: Do not forward Upgrade headers.        
          Details: https://sg.run/ploZ                                                                       
                                                                                                             
          320┆ proxy_http_version 1.1;
          321┆ proxy_set_header Upgrade $http_upgrade;
          322┆ proxy_set_header Connection "upgrade";
            ⋮┆----------------------------------------
          367┆ proxy_http_version 1.1;
          368┆ proxy_set_header Upgrade $http_upgrade;
          369┆ proxy_set_header Connection "upgrade";
                                                             
  [36m[22m[24m  backend_server/config/nginx/sunri-pi2.conf[0m
    ❯❱ generic.nginx.security.alias-path-traversal.alias-path-traversal
          The alias in this location block is subject to a path traversal because the location path does not
          end in a path separator (e.g., '/'). To fix, add a path separator to the end of the path.         
          Details: https://sg.run/ZvNL                                                                      
                                                                                                            
           10┆ location ~                                                                            
               ^/host/stream/([^/]+)/(captures|thumbnails|segments|metadata|audio|transcript)/(.+)$ {
           11┆     alias /var/www/html/stream/;
           12┆     try_files /$1/hot/$2/$3 /$1/$2/$3 =404;
           13┆
           14┆     # CORS headers for HLS streaming
           15┆     add_header Access-Control-Allow-Origin "*" always;
           16┆     add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
           17┆     add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-
               Since,Cache-Control,Content-Type,Range" always;                                          
           18┆     add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
           19┆
             [hid 9 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ generic.nginx.security.header-redefinition.header-redefinition
          The 'add_header' directive is called in a 'location' block after headers have been set at the server
          block. Calling 'add_header' in the location block will actually overwrite the headers defined in the
          server block, no matter which headers are set. To fix this, explicitly set all headers or set all   
          headers in the server block.                                                                        
          Details: https://sg.run/Lwl7                                                                        
                                                                                                              
           15┆ add_header Access-Control-Allow-Origin "*" always;
            ⋮┆----------------------------------------
           16┆ add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            ⋮┆----------------------------------------
           17┆ add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-
               Since,Cache-Control,Content-Type,Range" always;                                      
            ⋮┆----------------------------------------
           18┆ add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
            ⋮┆----------------------------------------
           21┆ add_header Cache-Control "no-cache, no-store, must-revalidate" always;
            ⋮┆----------------------------------------
           22┆ add_header Expires "0" always;
            ⋮┆----------------------------------------
           23┆ add_header Pragma "no-cache" always;
            ⋮┆----------------------------------------
           25┆ add_header Content-Length 0;
            ⋮┆----------------------------------------
           33┆ add_header Access-Control-Allow-Origin "*" always;
            ⋮┆----------------------------------------
           34┆ add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            ⋮┆----------------------------------------
           35┆ add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-
               Since,Cache-Control,Content-Type,Range" always;                                      
            ⋮┆----------------------------------------
           36┆ add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
            ⋮┆----------------------------------------
           39┆ add_header Content-Length 0;
            ⋮┆----------------------------------------
           50┆ add_header Access-Control-Allow-Origin "*" always;
            ⋮┆----------------------------------------
           51┆ add_header Access-Control-Allow-Methods "GET, OPTIONS";
            ⋮┆----------------------------------------
           52┆ add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-
               Since,Cache-Control,Content-Type,Range";                                             
            ⋮┆----------------------------------------
           53┆ add_header Access-Control-Expose-Headers "Content-Length,Content-Range";
            ⋮┆----------------------------------------
           55┆ add_header Content-Length 0;
   
    ❯❱ generic.nginx.security.insecure-redirect.insecure-redirect
          Detected an insecure redirect in this nginx configuration. If no scheme is specified, nginx will 
          forward the request with the incoming scheme. This could result in unencrypted communications. To
          fix this, include the 'https' scheme.                                                            
          Details: https://sg.run/8y14                                                                     
                                                                                                           
           70┆ rewrite ^ /host/vnc/vnc_lite.html permanent;
   
    ❯❱ generic.nginx.security.possible-h2c-smuggling.possible-nginx-h2c-smuggling
          Conditions for Nginx H2C smuggling identified. H2C smuggling allows upgrading HTTP/1.1 connections 
          to lesser-known HTTP/2 over cleartext (h2c) connections which can allow a bypass of reverse proxy  
          access controls, and lead to long-lived, unrestricted HTTP traffic directly to back-end servers. To
          mitigate: WebSocket support required: Allow only the value websocket for HTTP/1.1 upgrade headers  
          (e.g., Upgrade: websocket). WebSocket support not required: Do not forward Upgrade headers.        
          Details: https://sg.run/ploZ                                                                       
                                                                                                             
           76┆ proxy_http_version 1.1;
           77┆ proxy_set_header Upgrade $http_upgrade;
           78┆ proxy_set_header Connection "upgrade";
   
    ❯❱ generic.nginx.security.header-redefinition.header-redefinition
          The 'add_header' directive is called in a 'location' block after headers have been set at the server
          block. Calling 'add_header' in the location block will actually overwrite the headers defined in the
          server block, no matter which headers are set. To fix this, explicitly set all headers or set all   
          headers in the server block.                                                                        
          Details: https://sg.run/Lwl7                                                                        
                                                                                                              
           80┆ add_header Access-Control-Allow-Origin "*" always;
            ⋮┆----------------------------------------
           81┆ add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            ⋮┆----------------------------------------
           82┆ add_header Access-Control-Allow-Headers "Content-Type, Accept, Upgrade, Connection";
                                                             
  [36m[22m[24m  backend_server/config/nginx/sunri-pi3.conf[0m
    ❯❱ generic.nginx.security.alias-path-traversal.alias-path-traversal
          The alias in this location block is subject to a path traversal because the location path does not
          end in a path separator (e.g., '/'). To fix, add a path separator to the end of the path.         
          Details: https://sg.run/ZvNL                                                                      
                                                                                                            
           10┆ location ~                                                                            
               ^/host/stream/([^/]+)/(captures|thumbnails|segments|metadata|audio|transcript)/(.+)$ {
           11┆     alias /var/www/html/stream/;
           12┆     try_files /$1/hot/$2/$3 /$1/$2/$3 =404;
           13┆
           14┆     # CORS headers for HLS streaming
           15┆     add_header Access-Control-Allow-Origin "*" always;
           16┆     add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
           17┆     add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-
               Since,Cache-Control,Content-Type,Range" always;                                          
           18┆     add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
           19┆
             [hid 9 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ generic.nginx.security.header-redefinition.header-redefinition
          The 'add_header' directive is called in a 'location' block after headers have been set at the server
          block. Calling 'add_header' in the location block will actually overwrite the headers defined in the
          server block, no matter which headers are set. To fix this, explicitly set all headers or set all   
          headers in the server block.                                                                        
          Details: https://sg.run/Lwl7                                                                        
                                                                                                              
           15┆ add_header Access-Control-Allow-Origin "*" always;
            ⋮┆----------------------------------------
           16┆ add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            ⋮┆----------------------------------------
           17┆ add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-
               Since,Cache-Control,Content-Type,Range" always;                                      
            ⋮┆----------------------------------------
           18┆ add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
            ⋮┆----------------------------------------
           21┆ add_header Cache-Control "no-cache, no-store, must-revalidate" always;
            ⋮┆----------------------------------------
           22┆ add_header Expires "0" always;
            ⋮┆----------------------------------------
           23┆ add_header Pragma "no-cache" always;
            ⋮┆----------------------------------------
           25┆ add_header Content-Length 0;
            ⋮┆----------------------------------------
           33┆ add_header Access-Control-Allow-Origin "*" always;
            ⋮┆----------------------------------------
           34┆ add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            ⋮┆----------------------------------------
           35┆ add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-
               Since,Cache-Control,Content-Type,Range" always;                                      
            ⋮┆----------------------------------------
           36┆ add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
            ⋮┆----------------------------------------
           39┆ add_header Content-Length 0;
            ⋮┆----------------------------------------
           50┆ add_header Access-Control-Allow-Origin "*" always;
            ⋮┆----------------------------------------
           51┆ add_header Access-Control-Allow-Methods "GET, OPTIONS";
            ⋮┆----------------------------------------
           52┆ add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-
               Since,Cache-Control,Content-Type,Range";                                             
            ⋮┆----------------------------------------
           53┆ add_header Access-Control-Expose-Headers "Content-Length,Content-Range";
            ⋮┆----------------------------------------
           55┆ add_header Content-Length 0;
   
    ❯❱ generic.nginx.security.insecure-redirect.insecure-redirect
          Detected an insecure redirect in this nginx configuration. If no scheme is specified, nginx will 
          forward the request with the incoming scheme. This could result in unencrypted communications. To
          fix this, include the 'https' scheme.                                                            
          Details: https://sg.run/8y14                                                                     
                                                                                                           
           70┆ rewrite ^ /host/vnc/vnc_lite.html permanent;
   
    ❯❱ generic.nginx.security.possible-h2c-smuggling.possible-nginx-h2c-smuggling
          Conditions for Nginx H2C smuggling identified. H2C smuggling allows upgrading HTTP/1.1 connections 
          to lesser-known HTTP/2 over cleartext (h2c) connections which can allow a bypass of reverse proxy  
          access controls, and lead to long-lived, unrestricted HTTP traffic directly to back-end servers. To
          mitigate: WebSocket support required: Allow only the value websocket for HTTP/1.1 upgrade headers  
          (e.g., Upgrade: websocket). WebSocket support not required: Do not forward Upgrade headers.        
          Details: https://sg.run/ploZ                                                                       
                                                                                                             
           76┆ proxy_http_version 1.1;
           77┆ proxy_set_header Upgrade $http_upgrade;
           78┆ proxy_set_header Connection "upgrade";
   
    ❯❱ generic.nginx.security.header-redefinition.header-redefinition
          The 'add_header' directive is called in a 'location' block after headers have been set at the server
          block. Calling 'add_header' in the location block will actually overwrite the headers defined in the
          server block, no matter which headers are set. To fix this, explicitly set all headers or set all   
          headers in the server block.                                                                        
          Details: https://sg.run/Lwl7                                                                        
                                                                                                              
           80┆ add_header Access-Control-Allow-Origin "*" always;
            ⋮┆----------------------------------------
           81┆ add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            ⋮┆----------------------------------------
           82┆ add_header Access-Control-Allow-Headers "Content-Type, Accept, Upgrade, Connection";
                                                             
  [36m[22m[24m  backend_server/config/nginx/sunri-pi4.conf[0m
    ❯❱ generic.nginx.security.possible-h2c-smuggling.possible-nginx-h2c-smuggling
          Conditions for Nginx H2C smuggling identified. H2C smuggling allows upgrading HTTP/1.1 connections 
          to lesser-known HTTP/2 over cleartext (h2c) connections which can allow a bypass of reverse proxy  
          access controls, and lead to long-lived, unrestricted HTTP traffic directly to back-end servers. To
          mitigate: WebSocket support required: Allow only the value websocket for HTTP/1.1 upgrade headers  
          (e.g., Upgrade: websocket). WebSocket support not required: Do not forward Upgrade headers.        
          Details: https://sg.run/ploZ                                                                       
                                                                                                             
           49┆ proxy_http_version 1.1;
           50┆ proxy_set_header Upgrade $http_upgrade;
           51┆ proxy_set_header Connection "upgrade";
            ⋮┆----------------------------------------
           91┆ proxy_http_version 1.1;
           92┆ proxy_set_header Upgrade $http_upgrade;
           93┆ proxy_set_header Connection "upgrade";
            ⋮┆----------------------------------------
          109┆ proxy_http_version 1.1;
          110┆ proxy_set_header Upgrade $http_upgrade;
          111┆ proxy_set_header Connection "upgrade";
            ⋮┆----------------------------------------
          124┆ proxy_http_version 1.1;
          125┆ proxy_set_header Upgrade $http_upgrade;
          126┆ proxy_set_header Connection "upgrade";
            ⋮┆----------------------------------------
          132┆ proxy_http_version 1.1;
          133┆ proxy_set_header Upgrade $http_upgrade;
          134┆ proxy_set_header Connection "upgrade";
   
    ❯❱ generic.nginx.security.alias-path-traversal.alias-path-traversal
          The alias in this location block is subject to a path traversal because the location path does not
          end in a path separator (e.g., '/'). To fix, add a path separator to the end of the path.         
          Details: https://sg.run/ZvNL                                                                      
                                                                                                            
          142┆ location ~                                                                            
               ^/host/stream/([^/]+)/(captures|thumbnails|segments|metadata|audio|transcript)/(.+)$ {
          143┆     alias /var/www/html/stream/;
          144┆     try_files /$1/hot/$2/$3 /$1/$2/$3 =404;
          145┆
          146┆     # CORS headers for HLS streaming
          147┆     add_header Access-Control-Allow-Origin "*" always;
          148┆     add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
          149┆     add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-
               Since,Cache-Control,Content-Type,Range" always;                                          
          150┆     add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
          151┆
             [hid 9 additional lines, adjust with --max-lines-per-finding] 
                                                                 
  [36m[22m[24m  backend_server/config/nginx/virtualpytest.conf[0m
    ❯❱ generic.nginx.security.insecure-redirect.insecure-redirect
          Detected an insecure redirect in this nginx configuration. If no scheme is specified, nginx will 
          forward the request with the incoming scheme. This could result in unencrypted communications. To
          fix this, include the 'https' scheme.                                                            
          Details: https://sg.run/8y14                                                                     
                                                                                                           
          121┆ rewrite ^ /mac/vnc/vnc_lite.html permanent;
   
    ❯❱ generic.nginx.security.possible-h2c-smuggling.possible-nginx-h2c-smuggling
          Conditions for Nginx H2C smuggling identified. H2C smuggling allows upgrading HTTP/1.1 connections 
          to lesser-known HTTP/2 over cleartext (h2c) connections which can allow a bypass of reverse proxy  
          access controls, and lead to long-lived, unrestricted HTTP traffic directly to back-end servers. To
          mitigate: WebSocket support required: Allow only the value websocket for HTTP/1.1 upgrade headers  
          (e.g., Upgrade: websocket). WebSocket support not required: Do not forward Upgrade headers.        
          Details: https://sg.run/ploZ                                                                       
                                                                                                             
          127┆ proxy_http_version 1.1;
          128┆ proxy_set_header Upgrade $http_upgrade;
          129┆ proxy_set_header Connection "upgrade";
   
    ❯❱ generic.nginx.security.alias-path-traversal.alias-path-traversal
          The alias in this location block is subject to a path traversal because the location path does not
          end in a path separator (e.g., '/'). To fix, add a path separator to the end of the path.         
          Details: https://sg.run/ZvNL                                                                      
                                                                                                            
          143┆ location ~                                                                            
               ^/host/stream/([^/]+)/(captures|thumbnails|segments|metadata|audio|transcript)/(.+)$ {
          144┆     alias /var/www/html/stream/;
          145┆     try_files /$1/hot/$2/$3 /$1/$2/$3 =404;
          146┆
          147┆     # CORS headers for HLS streaming
          148┆     add_header Access-Control-Allow-Origin "*" always;
          149┆     add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
          150┆     add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-
               Since,Cache-Control,Content-Type,Range" always;                                          
          151┆     add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
          152┆
             [hid 8 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ generic.nginx.security.possible-h2c-smuggling.possible-nginx-h2c-smuggling
          Conditions for Nginx H2C smuggling identified. H2C smuggling allows upgrading HTTP/1.1 connections 
          to lesser-known HTTP/2 over cleartext (h2c) connections which can allow a bypass of reverse proxy  
          access controls, and lead to long-lived, unrestricted HTTP traffic directly to back-end servers. To
          mitigate: WebSocket support required: Allow only the value websocket for HTTP/1.1 upgrade headers  
          (e.g., Upgrade: websocket). WebSocket support not required: Do not forward Upgrade headers.        
          Details: https://sg.run/ploZ                                                                       
                                                                                                             
          212┆ proxy_http_version 1.1;
          213┆ proxy_set_header Upgrade $http_upgrade;
          214┆ proxy_set_header Connection "upgrade";
   
    ❯❱ generic.nginx.security.insecure-redirect.insecure-redirect
          Detected an insecure redirect in this nginx configuration. If no scheme is specified, nginx will 
          forward the request with the incoming scheme. This could result in unencrypted communications. To
          fix this, include the 'https' scheme.                                                            
          Details: https://sg.run/8y14                                                                     
                                                                                                           
          240┆ rewrite ^ /pi2/vnc/vnc_lite.html permanent;
   
    ❯❱ generic.nginx.security.possible-h2c-smuggling.possible-nginx-h2c-smuggling
          Conditions for Nginx H2C smuggling identified. H2C smuggling allows upgrading HTTP/1.1 connections 
          to lesser-known HTTP/2 over cleartext (h2c) connections which can allow a bypass of reverse proxy  
          access controls, and lead to long-lived, unrestricted HTTP traffic directly to back-end servers. To
          mitigate: WebSocket support required: Allow only the value websocket for HTTP/1.1 upgrade headers  
          (e.g., Upgrade: websocket). WebSocket support not required: Do not forward Upgrade headers.        
          Details: https://sg.run/ploZ                                                                       
                                                                                                             
          245┆ proxy_http_version 1.1;
          246┆ proxy_set_header Upgrade $http_upgrade;
          247┆ proxy_set_header Connection "upgrade";
   
    ❯❱ generic.nginx.security.insecure-redirect.insecure-redirect
          Detected an insecure redirect in this nginx configuration. If no scheme is specified, nginx will 
          forward the request with the incoming scheme. This could result in unencrypted communications. To
          fix this, include the 'https' scheme.                                                            
          Details: https://sg.run/8y14                                                                     
                                                                                                           
          279┆ rewrite ^ /pi3/vnc/vnc_lite.html permanent;
   
    ❯❱ generic.nginx.security.possible-h2c-smuggling.possible-nginx-h2c-smuggling
          Conditions for Nginx H2C smuggling identified. H2C smuggling allows upgrading HTTP/1.1 connections 
          to lesser-known HTTP/2 over cleartext (h2c) connections which can allow a bypass of reverse proxy  
          access controls, and lead to long-lived, unrestricted HTTP traffic directly to back-end servers. To
          mitigate: WebSocket support required: Allow only the value websocket for HTTP/1.1 upgrade headers  
          (e.g., Upgrade: websocket). WebSocket support not required: Do not forward Upgrade headers.        
          Details: https://sg.run/ploZ                                                                       
                                                                                                             
          284┆ proxy_http_version 1.1;
          285┆ proxy_set_header Upgrade $http_upgrade;
          286┆ proxy_set_header Connection "upgrade";
   
    ❯❱ generic.nginx.security.insecure-redirect.insecure-redirect
          Detected an insecure redirect in this nginx configuration. If no scheme is specified, nginx will 
          forward the request with the incoming scheme. This could result in unencrypted communications. To
          fix this, include the 'https' scheme.                                                            
          Details: https://sg.run/8y14                                                                     
                                                                                                           
          318┆ rewrite ^ /pi4/vnc/vnc_lite.html permanent;
   
    ❯❱ generic.nginx.security.possible-h2c-smuggling.possible-nginx-h2c-smuggling
          Conditions for Nginx H2C smuggling identified. H2C smuggling allows upgrading HTTP/1.1 connections 
          to lesser-known HTTP/2 over cleartext (h2c) connections which can allow a bypass of reverse proxy  
          access controls, and lead to long-lived, unrestricted HTTP traffic directly to back-end servers. To
          mitigate: WebSocket support required: Allow only the value websocket for HTTP/1.1 upgrade headers  
          (e.g., Upgrade: websocket). WebSocket support not required: Do not forward Upgrade headers.        
          Details: https://sg.run/ploZ                                                                       
                                                                                                             
          323┆ proxy_http_version 1.1;
          324┆ proxy_set_header Upgrade $http_upgrade;
          325┆ proxy_set_header Connection "upgrade";
            ⋮┆----------------------------------------
          350┆ proxy_http_version 1.1;
          351┆ proxy_set_header Upgrade $http_upgrade;
          352┆ proxy_set_header Connection "upgrade";
                                                                        
  [36m[22m[24m  backend_server/src/routes/server_deployment_routes.py[0m
   ❯❯❱ python.flask.security.injection.ssrf-requests.ssrf-requests
          Data from request object is passed to a new server-side request. This could lead to a server-side  
          request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an        
          allowlist, do not forward the response to the user, and ensure proper authentication and transport-
          layer security in the proxied request.                                                             
          Details: https://sg.run/J9LW                                                                       
                                                                                                             
           84┆ requests.delete(host_url, timeout=10)
            ⋮┆----------------------------------------
           87┆ requests.post(host_url, json=updated_deployment, timeout=10)
            ⋮┆----------------------------------------
          114┆ requests.post(host_url, timeout=10)
            ⋮┆----------------------------------------
          131┆ requests.post(host_url, timeout=10)
            ⋮┆----------------------------------------
          148┆ requests.delete(host_url, timeout=10)
                                                                        
  [36m[22m[24m  backend_server/src/routes/server_monitoring_routes.py[0m
   ❯❯❱ python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests
          Data from request object is passed to a new server-side request. This could lead to a server-side  
          request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an        
          allowlist, do not forward the response to the user, and ensure proper authentication and transport-
          layer security in the proxied request. See https://owasp.org/www-                                  
          community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities.            
          Details: https://sg.run/YvY4                                                                       
                                                                                                             
          122┆ host_ip = request.args.get('host_ip')
          123┆ host_port = request.args.get('host_port', '5000')
          124┆ device_id = request.args.get('device_id', 'device1')
          125┆
          126┆ if not host_ip:
          127┆     return jsonify({
          128┆         'success': False,
          129┆         'error': 'host_ip parameter required'
          130┆     }), 400
          131┆
             [hid 43 additional lines, adjust with --max-lines-per-finding] 
          123┆ host_port = request.args.get('host_port', '5000')
          124┆ device_id = request.args.get('device_id', 'device1')
          125┆
          126┆ if not host_ip:
          127┆     return jsonify({
          128┆         'success': False,
          129┆         'error': 'host_ip parameter required'
          130┆     }), 400
          131┆
          132┆ # SECURITY: Validate host_ip against allowlist to prevent SSRF
             [hid 42 additional lines, adjust with --max-lines-per-finding] 
          124┆ device_id = request.args.get('device_id', 'device1')
          125┆
          126┆ if not host_ip:
          127┆     return jsonify({
          128┆         'success': False,
          129┆         'error': 'host_ip parameter required'
          130┆     }), 400
          131┆
          132┆ # SECURITY: Validate host_ip against allowlist to prevent SSRF
          133┆ if not _validate_host_ip(host_ip):
             [hid 41 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ python.django.security.injection.tainted-url-host.tainted-url-host
          User data flows into the host portion of this manually-constructed URL. This could allow an attacker
          to send data to their own server, potentially exposing sensitive data such as cookies or            
          authorization information sent with this request. They could also probe internal servers or other   
          resources that the server running this code can access. (This is called server-side request forgery,
          or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode
          the correct host.                                                                                   
          Details: https://sg.run/oYz6                                                                        
                                                                                                              
          142┆ file_url =                                                                                
               f"http://{host_ip}:{host_port}/host/av/images/screenshot/{filename}?device_id={device_id}"
   
    ❯❱ python.flask.security.injection.tainted-url-host.tainted-url-host
          User data flows into the host portion of this manually-constructed URL. This could allow an attacker
          to send data to their own server, potentially exposing sensitive data such as cookies or            
          authorization information sent with this request. They could also probe internal servers or other   
          resources that the server running this code can access. (This is called server-side request forgery,
          or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode
          the correct host.                                                                                   
          Details: https://sg.run/RXpK                                                                        
                                                                                                              
          142┆ file_url =                                                                                
               f"http://{host_ip}:{host_port}/host/av/images/screenshot/{filename}?device_id={device_id}"
   
   ❯❯❱ python.flask.security.injection.ssrf-requests.ssrf-requests
          Data from request object is passed to a new server-side request. This could lead to a server-side  
          request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an        
          allowlist, do not forward the response to the user, and ensure proper authentication and transport-
          layer security in the proxied request.                                                             
          Details: https://sg.run/J9LW                                                                       
                                                                                                             
          145┆ response = requests.get(file_url, stream=True, timeout=30)
   
     ❱ python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http
          Detected a request using 'http://'. This request will be unencrypted, and attackers could listen
          into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.
          Details: https://sg.run/W8J4                                                                    
                                                                                                          
          145┆ response = requests.get(file_url, stream=True, timeout=30)
                                      
  [36m[22m[24m  frontend/nginx.conf[0m
    ❯❱ generic.nginx.security.missing-internal.missing-internal
          This location block contains a 'proxy_pass' directive but does not contain the 'internal' directive.
          The 'internal' directive restricts access to this location to internal requests. Without 'internal',
          an attacker could use your server for server-side request forgeries (SSRF). Include the 'internal'  
          directive in this block to limit exposure.                                                          
          Details: https://sg.run/Q5px                                                                        
                                                                                                              
           26┆ proxy_pass ${BACKEND_API_URL};
   
    ❯❱ generic.nginx.security.possible-h2c-smuggling.possible-nginx-h2c-smuggling
          Conditions for Nginx H2C smuggling identified. H2C smuggling allows upgrading HTTP/1.1 connections 
          to lesser-known HTTP/2 over cleartext (h2c) connections which can allow a bypass of reverse proxy  
          access controls, and lead to long-lived, unrestricted HTTP traffic directly to back-end servers. To
          mitigate: WebSocket support required: Allow only the value websocket for HTTP/1.1 upgrade headers  
          (e.g., Upgrade: websocket). WebSocket support not required: Do not forward Upgrade headers.        
          Details: https://sg.run/ploZ                                                                       
                                                                                                             
           27┆ proxy_http_version 1.1;
           28┆ proxy_set_header Upgrade $http_upgrade;
           29┆ proxy_set_header Connection 'upgrade';
   
    ❯❱ generic.nginx.security.missing-internal.missing-internal
          This location block contains a 'proxy_pass' directive but does not contain the 'internal' directive.
          The 'internal' directive restricts access to this location to internal requests. Without 'internal',
          an attacker could use your server for server-side request forgeries (SSRF). Include the 'internal'  
          directive in this block to limit exposure.                                                          
          Details: https://sg.run/Q5px                                                                        
                                                                                                              
           40┆ proxy_pass ${BACKEND_API_URL};
   
    ❯❱ generic.nginx.security.possible-h2c-smuggling.possible-nginx-h2c-smuggling
          Conditions for Nginx H2C smuggling identified. H2C smuggling allows upgrading HTTP/1.1 connections 
          to lesser-known HTTP/2 over cleartext (h2c) connections which can allow a bypass of reverse proxy  
          access controls, and lead to long-lived, unrestricted HTTP traffic directly to back-end servers. To
          mitigate: WebSocket support required: Allow only the value websocket for HTTP/1.1 upgrade headers  
          (e.g., Upgrade: websocket). WebSocket support not required: Do not forward Upgrade headers.        
          Details: https://sg.run/ploZ                                                                       
                                                                                                             
           41┆ proxy_http_version 1.1;
           42┆ proxy_set_header Upgrade $http_upgrade;
           43┆ proxy_set_header Connection "upgrade";
                                                
  [36m[22m[24m  frontend/public/hls-test.html[0m
    ❯❱ html.security.audit.missing-integrity.missing-integrity
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
          338┆ <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
                                                           
  [36m[22m[24m  frontend/public/mobile-scaling-test.html[0m
    ❯❱ html.security.audit.missing-integrity.missing-integrity
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
          291┆ <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
                                                                 
  [36m[22m[24m  frontend/src/components/actions/ActionItem.tsx[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
          1605┆ `[@component:ActionItem] Invalid actions for category ${category}:`,
                                                                  
  [36m[22m[24m  frontend/src/components/actions/ActionsList.tsx[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
           37┆ console.log(`🔍 [DEBUG] Checking category: ${category}`, actions);
            ⋮┆----------------------------------------
           43┆ console.log(`🔍 [DEBUG] Found action in category ${category}:`, action);
                                                                    
  [36m[22m[24m  frontend/src/components/common/HLSVideoPlayer.tsx[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
          470┆ console.warn(`[@component:HLSVideoPlayer] Segment 404 error
               (${newCount}/${maxSegmentFailures}):`, data.frag?.url);    
                                                                              
  [36m[22m[24m  frontend/src/components/controller/remote/AppiumOverlay.tsx[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
          224┆ console.log(`[@component:AppiumOverlay] Element ${index + 1} scaling debug:`, {
                                                                             
  [36m[22m[24m  frontend/src/components/controller/remote/AppiumRemote.tsx[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
          231┆ console.log(`[@component:AppiumRemote] Element ${el.id} debug:`, {
                                                                                   
  [36m[22m[24m  frontend/src/components/controller/web/PlaywrightWebTerminal.tsx[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
          601┆ console.error(`Press ${key} key error:`, error);
                                                                            
  [36m[22m[24m  frontend/src/components/verification/VerificationItem.tsx[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
          123┆ `[@component:VerificationItem] Invalid verifications for category ${category}:`,
                                                                             
  [36m[22m[24m  frontend/src/components/verification/VerificationsList.tsx[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
           85┆ console.log(`[VerificationsList] Auto-resolving area for ${referenceName}:`, dbArea);
                                                                             
  [36m[22m[24m  frontend/src/components/video/hooks/useTranscriptPlayer.ts[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
          330┆ console.error(`[@useTranscriptPlayer] Error loading ${language}:`, error);
                                                          
  [36m[22m[24m  frontend/src/config/av/avPanelLayout.ts[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
          110┆ console.error(`[@config:avPanelLayout] Error loading config for ${streamType}:`, error);
                                                                  
  [36m[22m[24m  frontend/src/config/remote/remotePanelLayout.ts[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
          358┆ console.log(`[@config:remotePanelLayout] Loaded config for ${deviceModel}${irType ? `
               (${irType})` : ''}:`, config);                                                       
            ⋮┆----------------------------------------
          361┆ console.error(`[@config:remotePanelLayout] Failed to load config for ${deviceModel}:`,
               error);                                                                               
                                                                
  [36m[22m[24m  frontend/src/contexts/HostManagerProvider.tsx[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
          450┆ `[@context:HostManagerProvider] Exception taking control of device
               ${host.host_name}:${device_id || 'device1'}:`,                    
            ⋮┆----------------------------------------
          528┆ `[@context:HostManagerProvider] Exception releasing control of device
               ${host.host_name}:${device_id || 'device1'}:`,                       
            ⋮┆----------------------------------------
          686┆ `[@context:HostManagerProvider] Error cleaning up lock for ${hostName}:`,
                                                                         
  [36m[22m[24m  frontend/src/contexts/navigation/NavigationContext.tsx[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
          948┆ console.log(`[@NavigationContext] Saving node ${updatedNodeData.id} with canvas position:`,
               currentPosition);                                                                          
            ⋮┆----------------------------------------
          1058┆ console.log(`[@NavigationContext] Saving edge ${updatedEdge.id} with canvas handles:`, {
            ⋮┆----------------------------------------
          1197┆ console.log(`[@NavigationContext:hasNodeChanged] Comparing node ${node.id}
               (${node.data.label}):`, {                                                  
            ⋮┆----------------------------------------
          1266┆ console.log(`[@NavigationContext] Saving node ${node.id} (${node.data.label}) at
               position:`, { x: normalized.position_x, y: normalized.position_y });             
                                                                    
  [36m[22m[24m  frontend/src/hooks/controller/useAndroidMobile.ts[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
          263┆ console.log(`[@hook:useAndroidMobile] Executing remote command: ${command}`, params);
                                                                   
  [36m[22m[24m  frontend/src/hooks/controller/useAppiumRemote.ts[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
          109┆ console.log(`[@hook:useAppiumRemote] Executing command: ${command}`, params);
            ⋮┆----------------------------------------
          134┆ console.error(`[@hook:useAppiumRemote] Command ${command} failed:`, result.error);
            ⋮┆----------------------------------------
          137┆ console.error(`[@hook:useAppiumRemote] Command ${command} error:`, error);
                                                                 
  [36m[22m[24m  frontend/src/hooks/controller/useHdmiStream.ts[0m
    ❯❱ javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp
          RegExp() called with a `text` function argument, this might allow an attacker to cause a Regular    
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          369┆ new RegExp(text);
                                                                     
  [36m[22m[24m  frontend/src/hooks/controller/useInfraredRemote.ts[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
          137┆ console.log(`[@hook:useInfraredRemote] Sending IR command: ${command}`, params);
            ⋮┆----------------------------------------
          171┆ console.log(`[@hook:useInfraredRemote] Successfully sent IR command: ${command}`, result);
                                                                    
  [36m[22m[24m  frontend/src/hooks/controller/usePlaywrightWeb.ts[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
           56┆ `[@hook:usePlaywrightWeb] Executing command on ${host.host_name}:`,
                                                                       
  [36m[22m[24m  frontend/src/hooks/controller/useRemoteConnection.ts[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
           58┆ console.log(`[@hook:useRemoteConnection] Device config for ${remoteType}:`, deviceConfig);
            ⋮┆----------------------------------------
          312┆ console.log(`[@hook:useRemoteConnection] Sending remote command: ${command}`, params);
                                                                       
  [36m[22m[24m  frontend/src/hooks/navigation/useNavigationEditor.ts[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
          436┆ console.log(`[@useNavigationEditor:onConnect] ROOT NODE: '${sourceNode.data.label}'
               (${rootType}) becomes parent of '${targetNode.data.label}':`, newParent);          
            ⋮┆----------------------------------------
          450┆ console.log(`[@useNavigationEditor:onConnect] ROOT NODE: '${targetNode.data.label}'
               (${rootType}) becomes parent of '${sourceNode.data.label}':`, newParent);          
            ⋮┆----------------------------------------
          466┆ console.log(`[@useNavigationEditor:onConnect] Source node '${sourceNode.data.label}'
               inheriting ${isVerticalConnection ? 'child' : 'sibling'} relationship from          
               '${targetNode.data.label}':`, newParent);                                           
            ⋮┆----------------------------------------
          479┆ console.log(`[@useNavigationEditor:onConnect] Target node '${targetNode.data.label}'
               inheriting ${isVerticalConnection ? 'child' : 'sibling'} relationship from          
               '${sourceNode.data.label}':`, newParent);                                           
                                                                       
  [36m[22m[24m  frontend/src/hooks/navigation/useNestedNavigation.ts[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
           87┆ console.log(`[@useNestedNavigation] Found ${subTrees.length} existing subtrees:`,
               subTrees);                                                                       
                                                          
  [36m[22m[24m  frontend/src/hooks/pages/useCampaign.ts[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
          488┆ console.error(`[@hook:useCampaign] Error analyzing script ${scriptName}:`, error);
                                                            
  [36m[22m[24m  frontend/src/hooks/pages/useDependency.ts[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
          103┆ console.warn(`[@hook:useDependency] Failed to load tree data for ${treeId}:`, err);
            ⋮┆----------------------------------------
          142┆ console.warn(`[@hook:useDependency] Failed to fetch ${elementType} label for
               ${elementId}:`, error);                                                     
                                                        
  [36m[22m[24m  frontend/src/hooks/pages/useDevice.ts[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
           88┆ `[@hook:useDeviceModels:getDeviceModel] Error fetching device model ${id}:`,
            ⋮┆----------------------------------------
          137┆ console.log(`[@hook:useDeviceModels:updateDeviceModel] Updating device model: ${id}`,
               model);                                                                              
            ⋮┆----------------------------------------
          159┆ `[@hook:useDeviceModels:updateDeviceModel] Error updating device model ${id}:`,
            ⋮┆----------------------------------------
          189┆ `[@hook:useDeviceModels:deleteDeviceModel] Error deleting device model ${id}:`,
                                                              
  [36m[22m[24m  frontend/src/hooks/pages/useDeviceModels.ts[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
           88┆ `[@hook:useDeviceModels:getDeviceModel] Error fetching device model ${id}:`,
            ⋮┆----------------------------------------
          137┆ console.log(`[@hook:useDeviceModels:updateDeviceModel] Updating device model: ${id}`,
               model);                                                                              
            ⋮┆----------------------------------------
          159┆ `[@hook:useDeviceModels:updateDeviceModel] Error updating device model ${id}:`,
            ⋮┆----------------------------------------
          189┆ `[@hook:useDeviceModels:deleteDeviceModel] Error deleting device model ${id}:`,
                                                     
  [36m[22m[24m  frontend/src/hooks/pages/useRec.ts[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
          188┆ `[@hook:useRec] Failed to restart stream for ${host.host_name}-${device.device_id}:`,
            ⋮┆----------------------------------------
          194┆ `[@hook:useRec] Restart request failed for ${host.host_name}-${device.device_id}:`,
            ⋮┆----------------------------------------
          200┆ `[@hook:useRec] Error restarting stream for ${host.host_name}-${device.device_id}:`,
            ⋮┆----------------------------------------
          317┆ console.log(`[@hook:useRec] Invalid manifest for ${host.host_name}-${deviceId} - no #EXTM3U
               header. First 100 chars:`, manifestText.substring(0, 100));                                
                                                         
  [36m[22m[24m  frontend/src/hooks/pages/useRestart.ts[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
          736┆ console.error(`[@hook:useRestart] Dubbing failed for ${language}:`, error);
                                                               
  [36m[22m[24m  frontend/src/hooks/pages/useUserInterface.ts[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
          171┆ `[@hook:useUserInterface:getUserInterface] Error fetching user interface ${id}:`,
            ⋮┆----------------------------------------
          219┆ `[@hook:useUserInterface:getUserInterfaceByName] Error fetching user interface by name
               ${name}:`,                                                                            
            ⋮┆----------------------------------------
          289┆ `[@hook:useUserInterface:updateUserInterface] Updating user interface ${id}:`,
            ⋮┆----------------------------------------
          320┆ `[@hook:useUserInterface:updateUserInterface] Error updating user interface ${id}:`,
            ⋮┆----------------------------------------
          360┆ `[@hook:useUserInterface:deleteUserInterface] Error deleting user interface ${id}:`,
            ⋮┆----------------------------------------
          418┆ `[@hook:useUserInterface:createEmptyNavigationConfig] Error creating navigation config for
               ${userInterface.name}:`,                                                                  
            ⋮┆----------------------------------------
          477┆ `[@hook:useUserInterface:getCompatibleInterfaces] Error fetching compatible interfaces for
               ${deviceModel}:`,                                                                         
                                                         
  [36m[22m[24m  frontend/src/hooks/script/useScript.ts[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
          208┆ console.warn(`[@hook:useScript] Error polling task ${taskId}:`, pollError);
            ⋮┆----------------------------------------
          303┆ console.error(`[@hook:useScript] Error in execution ${execution.id}:`, error);
                                                   
  [36m[22m[24m  frontend/src/hooks/useHeatmap.ts[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
          121┆ console.log(`[useHeatmap] Successfully loaded analysis data for ${item.timeKey}:`, data);
            ⋮┆----------------------------------------
          166┆ console.log(`No analysis data available for ${item.timeKey}:`, error.message);
                                                                           
  [36m[22m[24m  frontend/src/hooks/verification/useVerificationEditor.ts[0m
    ❯❱ javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp
          RegExp() called with a `text` function argument, this might allow an attacker to cause a Regular    
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          632┆ new RegExp(text);
                                                   
  [36m[22m[24m  frontend/src/pages/Dashboard.tsx[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
           84┆ console.error(`Failed to restart vpt_host service on ${host.host_name}:`, result.error);
            ⋮┆----------------------------------------
          114┆ console.error(`Failed to reboot ${host.host_name}:`, result.error);
            ⋮┆----------------------------------------
          141┆ console.error(`Failed to restart vpt_server_host service on server ${serverUrl}:`,
               result.error);                                                                    
            ⋮┆----------------------------------------
          166┆ console.error(`Failed to reboot server ${serverUrl}:`, result.error);
                                                             
  [36m[22m[24m  frontend/src/pages/MonitoringIncidents.tsx[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
          212┆ console.error(`[@component:MonitoringIncidents] Error formatting date: ${dateString}`,
               error);                                                                               
            ⋮┆----------------------------------------
          526┆ console.log(`[@MonitoringIncidents] Freeze frame ${index}:`, imageUrl);
                                                          
  [36m[22m[24m  frontend/src/pages/NavigationEditor.tsx[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
          593┆ console.error(`[@component:NavigationEditor] Failed to resolve userInterface for treeName
               ${treeName}:`, error);                                                                   
                                                       
  [36m[22m[24m  frontend/src/pages/Notifications.tsx[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
          140┆ console.log(`Test result for ${name}:`, result);
                                             
  [36m[22m[24m  frontend/src/pages/Rec.tsx[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
           59┆ console.log(`[@Rec] Card ${deviceKey} props changed:`, changes);
                                                      
  [36m[22m[24m  frontend/src/utils/buildUrlUtils.ts[0m
     ❱ javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
          Detected string concatenation with a non-literal variable in a util.format / console.log function.
          If an attacker injects a format specifier in the string, it will forge the log message. Try to use
          constant values for the format string.                                                            
          Details: https://sg.run/7Y5R                                                                      
                                                                                                            
          642┆ `[@utils:buildUrlUtils] Invalid manifest for ${host.host_name}-${deviceId} - no #EXTM3U
               header. First 100 chars:`,                                                             
                                             
  [36m[22m[24m  grafana/config/grafana.ini[0m
   ❯❯❱ javascript.lang.security.detect-insecure-websocket.detect-insecure-websocket
          Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
          Details: https://sg.run/GWyz                                                                     
                                                                                                           
          415┆ ;content_security_policy_template = """script-src 'self' 'unsafe-eval' 'unsafe-inline'    
               'strict-dynamic' $NONCE;object-src 'none';font-src 'self';style-src 'self' 'unsafe-inline'
               blob:;img-src * data:;base-uri 'self';connect-src 'self' grafana.com ws://$ROOT_PATH      
               wss://$ROOT_PATH;manifest-src 'self';media-src 'none';form-action 'self';"""              
            ⋮┆----------------------------------------
          424┆ ;content_security_policy_report_only_template = """script-src 'self' 'unsafe-eval' 'unsafe-
               inline' 'strict-dynamic' $NONCE;object-src 'none';font-src 'self';style-src 'self' 'unsafe-
               inline' blob:;img-src * data:;base-uri 'self';connect-src 'self' grafana.com               
               ws://$ROOT_PATH wss://$ROOT_PATH;manifest-src 'self';media-src 'none';form-action          
               'self';"""                                                                                 
                                                  
  [36m[22m[24m  setup/local/install_frontend.sh[0m
    ❯❱ bash.curl.security.curl-pipe-bash.curl-pipe-bash
          Data is being piped into `bash` from a `curl` command. An attacker with control of the server in the
          `curl` command could inject malicious code into the pipe, resulting in a system compromise. Avoid   
          piping untrusted data into `bash` or any other shell if you can. If you must do this, consider      
          checking the SHA sum of the content returned by the server to verify its integrity.                 
          Details: https://sg.run/KXz6                                                                        
                                                                                                              
           34┆ curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -

