# nginx configuration for Render deployment
# Handles /server/ routing for virtualpytest.com

server {
    listen 80;
    server_name _;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Grafana proxy (Flask handles this internally now)
    location /grafana/ {
        proxy_pass http://127.0.0.1:10000/grafana/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
    }
      # WebSocket proxy for VNC
    location /websockify {
        proxy_pass http://127.0.0.1:6080/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
        add_header Access-Control-Allow-Headers "Content-Type, Accept, Upgrade, Connection";
        proxy_redirect http:// https://;
    }
    
    # HLS Video Streams (for development/testing on Render)
    location /host/stream/ {
        # Note: In production, this would be served by the host machine
        # This is mainly for API documentation and testing
        
        # CORS headers for stream requests
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range" always;
        add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
        
        return 404 '{"error": "Stream not available", "message": "HLS streams are served by host machines"}';
        add_header Content-Type application/json;
    }
    
    # Backend server API - strip /server/ prefix
    location /server/ {
        # Remove /server/ prefix and forward to Flask
        rewrite ^/server/(.*)$ /$1 break;
        proxy_pass http://127.0.0.1:5110;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        
        # CORS headers for API
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            return 204;
        }
    }
    
    # Health check endpoint (direct to Flask)
    location /health {
        proxy_pass http://127.0.0.1:5110/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Default location - return API info
    location / {
        return 200 '{"service": "VirtualPyTest Backend Server", "status": "running", "endpoints": ["/server/*", "/grafana/*", "/health"]}';
        add_header Content-Type application/json;
    }
    
    # Error pages
    error_page 404 /404.html;
    location = /404.html {
        return 404 '{"error": "Not Found", "message": "Use /server/* for API endpoints"}';
        add_header Content-Type application/json;
    }
    
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        return 500 '{"error": "Server Error", "message": "Backend service unavailable"}';
        add_header Content-Type application/json;
    }
}
